/**
 * Sample React Native App
 *
 * adapted from App.js generated by the following command:
 *
 * react-native init example
 *
 * https://github.com/facebook/react-native
 */

import React, {Component, useEffect, useRef, useState} from 'react';
import {
  Platform,
  StyleSheet,
  Text,
  TextInput,
  TouchableOpacity,
  View,
} from 'react-native';
import {VertoClient, VertoView} from './src/verto-js/index';
import {checkPermissionVideoCall} from './src/verto-js/permission';
import {useMergeState} from './src/utils';
import {RTCView} from 'react-native-webrtc';

const App = () => {
  const [state, setState] = useMergeState({
    username: '',
    status: '',
    callNumber: '',
    isLogin: false,
    localStreamURL: '',
    remoteStreamURL: '',
    hasNewCall: false,
    abc: '',
  });
  const vertoClientRef = useRef();
  const callRef = useRef();

  const password = 'Aa11223344';
  const webSocketHost = 'ocs.telcovillage.com';
  const port = '8082';
  const vertoParams = {
    webSocket: {
      login: `${state.username}@${webSocketHost}`,
      password,
      url: `wss://${webSocketHost}:${port}`,
    },
    deviceParams: {
      useMic: 'any',
      useSpeak: 'any',
      useCamera: 'any',
    },
    useVideo: true,
    remoteVideo: 'remote-video',
    localVideo: 'local-video',
    onWebSocketLoginSuccess: () => {
      console.log(' vertoParams.onWebSocketLoginSuccess:');
      setState({status: 'login success', isLogin: true});
    },
    onWebSocketLoginError: () => {
      console.log(' vertoParams.onWebSocketLoginError:');
      setState({status: 'login fail'});
    },
    // onmessage: event => {
    //   console.log(' vertoParams.onmessage:', event, state.username);
    // },
    onPeerStreaming: stream => {
      console.log(
        ' vertoParams.onPeerStreaming:',
        stream.toURL(),
        state.username,
      );
      // setState({remoteStreamURL: stream.toURL()});
    },
    onPeerStreamingError: error => {
      console.log(' vertoParams.onPeerStreamingError:', error, state.username);
    },
  };
  const callbacks = {
    onPrivateEvent: (vertoClient, dataParams, userData) => {
      console.log(' callbacks.vertoClient:', vertoClient, dataParams, userData);
    },
    onEvent: (vertoClient, dataParams, userData) => {
      console.log(' callbacks.vertoClient:', vertoClient, dataParams, userData);
    },
    onInfo: params => {
      console.log(' callbacks.params:', params);
    },
    onClientReady: params => {
      console.log(' callbacks.params:', params);
    },
    onNewCall: call => {
      console.log('onNewCall', call);
      setState({hasNewCall: true});
      callRef.current = call;
    },
    onPlayLocalVideo: stream => {
      console.log('onPlayLocalVideo', stream.toURL(), state.username);
      setState({localStreamURL: stream.toURL()});
    },
    onPlayRemoteVideo: stream => {
      console.log('onPlayRemoteVideo', stream.toURL(), state.username);
      setState({remoteStreamURL: stream.toURL(), abc: stream.toURL()});
    },
    onHangup: callID => {
      setState({
        isLogin: false,
        localStreamURL: '',
        remoteStreamURL: '',
        hasNewCall: false,
        abc: '',
      });
    },
    onAnswer: params => {
      console.log('callbacks.params onAnswer:', params);
    },
  };

  const onPressCall = () => {
    try {
      const callParams = {
        to: state.callNumber,
        from: state.username,
        callerName: 'Uyen Nguyen',
      };
      console.log(
        'ðŸš€ ~ file: App.js:70 ~ onPressCall ~ vertoClientRef.current:',
        vertoClientRef.current,
      );
      callRef.current = vertoClientRef.current?.makeCall(callParams);
      console.log(
        'ðŸš€ ~ file: App.js:93 ~ onPressCall ~ callRef.current:',
        callRef.current,
      );
    } catch (error) {
      console.log('ðŸš€ ~ file: App.js:67 ~ onPressCall ~ error:', error);
    }
  };

  const onPressLogin = () => {
    vertoClientRef.current = new VertoClient(vertoParams, callbacks);
  };

  const onPressHangup = () => {
    console.log('has callRef.current:', !!callRef.current);
    callRef.current?.hangup();
    setState({
      isLogin: false,
      localStreamURL: '',
      remoteStreamURL: '',
      hasNewCall: false,
      abc: '',
    });
  };

  const onPressAnswer = () => {
    console.log('has callRef.current:', !!callRef.current);
    callRef.current?.answer();
  };
  useEffect(() => {
    const initData = async () => {
      try {
        const result = await checkPermissionVideoCall();
        console.log('ðŸš€ ~ file: App.js:67 ~ initData ~ result:', result);
      } catch (error) {
        console.log('ðŸš€ ~ file: App.js:73 ~ initData ~ error:', error);
      } finally {
      }
    };
    initData();
  }, []);
  console.log(
    'ðŸš€ ~ file: App.tsx:234 ~ App ~ state.remoteStreamURL:',
    state.remoteStreamURL,
    state.username,
  );

  return (
    <View style={styles.container}>
      <View style={styles.row}>
        <TextInput
          value={state.username}
          onChangeText={text => setState({username: text})}
          style={styles.input}
        />
        <TouchableOpacity onPress={onPressLogin}>
          <Text>Login</Text>
        </TouchableOpacity>
      </View>
      <View style={styles.row}>
        <TextInput
          value={state.callNumber}
          onChangeText={text => setState({callNumber: text})}
          style={styles.input}
        />
        <TouchableOpacity onPress={onPressCall}>
          <Text>Call</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={onPressHangup}>
          <Text>HangUp</Text>
        </TouchableOpacity>
      </View>
      <Text>status:{state.status} </Text>
      {state.hasNewCall ? (
        <TouchableOpacity onPress={onPressAnswer}>
          <Text>answer call</Text>
        </TouchableOpacity>
      ) : null}
      <View style={styles.row}>
        {state.remoteStreamURL ? (
          <RTCView
            key={state.remoteStreamURL}
            zOrder={20}
            streamURL={state.remoteStreamURL}
            style={{width: 100, height: 100, backgroundColor: 'green'}}
            objectFit={'cover'}
          />
        ) : null}
        {/* {state.localStreamURL ? (
          <RTCView
            key={state.localStreamURL}
            streamURL={state.localStreamURL}
            zOrder={20}
            objectFit={'cover'}
            style={{width: 100, height: 100, backgroundColor: 'red'}}
          />
        ) : null} */}
      </View>
      {/* {state.isLogin ? (
        <VertoView
          vertoParams={vertoParams}
          callbacks={callbacks}
          localStreamURL={state.localStreamURL}
          remoteStreamURL={state.remoteStreamURL}
        />
      ) : null} */}
    </View>
  );
};

export default App;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F5FCFF',
    padding: 24,
  },
  welcome: {
    fontSize: 20,
    textAlign: 'center',
    margin: 10,
  },
  instructions: {
    textAlign: 'center',
    color: '#333333',
    marginBottom: 5,
  },
  row: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginBottom: 24,
  },
  input: {
    width: 150,
    height: 50,
    borderColor: 'black',
    borderWidth: 1,
  },
});
